# –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å, –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏ Python, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –æ—Ç—Å—é–¥–∞: https://www.python.org/downloads/
# –î–∞–ª—å—à–µ, –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–¢–µ—Ä–º–∏–Ω–∞–ª" –≤ —É—Ç–∏–ª–∏—Ç–∞—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –≤ –ø–∞–ø–∫—É (–≤ —Å–∞–º–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ), –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç —Ñ–∞–π–ª model.py
# –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É, –≤–≤–µ–¥–∏ –∫–æ–º–º–∞–Ω–¥—É –∏ –Ω–∞–∂–º–∏ Enter: python3 model.py
# –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è ü•≥

INCREASE_FOR_CREATIVES = 1.3
INCREASE_FOR_RATING = 1.1
INCREASE_FOR_PUSH = 1.3
INCREASE_FOR_SIZE_ANDROID_100_500 = 1.1
INCREASE_FOR_SIZE_IOS_150_500 = 1.1
INCREASE_FOR_SIZE_500_1000 = 1.2
INCREASE_FOR_SIZE_OVER_1000 = 1.3
INCREASE_FEBRUARY_NOVEMBER = 1.3
INCREASE_DECEMBER = 2

MIN_BUDGET_FACEBOOK = 1500
MIN_BUDGET_GOOGLE = 1500
MIN_BUDGET_MYTARGET = 1000
MIN_BUDGET_INAPP = 1000
MIN_BUDGET_VIDEONETWORKS = 1500
MIN_BUDGET_TWITTER = 3000
MIN_BUDGET_SNAPCHAT = 2000
MIN_BUDGET_YANDEX = 1000
MIN_BUDGET_PINTEREST = 1500
MIN_BUDGET_DSP = 2000
MIN_BUDGET_ASA = 2000

VOLUME_COEFFICIENTS = {
        "Facebook": 1,
        "Google": 1.17,
        "myTarget": 1.33,
        "In-App": 1.17,
        "–í–∏–¥–µ–æ—Å–µ—Ç–∏": 0.5,
        "Twitter": 0.5,
        "Snapchat": 0.17,
        "–Ø–Ω–¥–µ–∫—Å": 0.67,
        "Pinterest": 0.17,
        "DSP": 1.33,
        "ASA": 0.5
    }

BUDGET_BOTTOM = {
        "Facebook": 1500,
        "Google": 1500,
        "myTarget": 1000,
        "In-App": 1000,
        "–í–∏–¥–µ–æ—Å–µ—Ç–∏": 1500,
        "Twitter": 3000,
        "Snapchat": 2000,
        "–Ø–Ω–¥–µ–∫—Å": 1000,
        "Pinterest": 1000,
        "DSP": 2000,
        "ASA": 2000
    }


class App:

    android_rates = {
        "Facebook": 1,
        "Google": 1,
        "myTarget": 0.9,
        "In-App": 0.9,
        "–í–∏–¥–µ–æ—Å–µ—Ç–∏": 1.1,
        "Twitter": 1.1,
        "Snapchat": 1,
        "–Ø–Ω–¥–µ–∫—Å": 1,
        "DSP": 0.9,
        "ASA": 1
    }

    ios_rates = {
        "Facebook": 1,
        "Google": 1.1,
        "myTarget": 0.9,
        "In-App": 0.9,
        "–í–∏–¥–µ–æ—Å–µ—Ç–∏": 1.05,
        "Twitter": 1.1,
        "Snapchat": 1,
        "–Ø–Ω–¥–µ–∫—Å": 1,
        "DSP": 0.9,
        "ASA": 1
    }

    def select_platform(self):
        # Limit the range of platforms if there is no need to count both.
        print("\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π? üòú")
        print("\n1) –î–∞–≤–∞–π —Å—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:")
        print("‚Äì –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ Android, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 0")
        print("‚Äì –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ iOS, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 1")
        print("‚Äì –µ—Å–ª–∏ Android –∏ iOS, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 2")

        while True:
            platform = int(input("–ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å -> "))

            if platform == 0:
                android_platform = True
                ios_platform = False
            elif platform == 1:
                android_platform = False
                ios_platform = True
            elif platform == 2:
                android_platform = True
                ios_platform = True
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return android_platform, ios_platform

    def choose_model(self):
        # Correct rates and volumes according to the CPA model if necessary.
        nandroid_platform, ios_platform = self.select_platform()
        print("\n2) –î–∞–≤–∞–π —É–∫–∞–∂–µ–º –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–ª KPI?")
        print("‚Äì –µ—Å–ª–∏ CPM, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 1")
        print("‚Äì –µ—Å–ª–∏ CPI, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 2")
        print("‚Äì –µ—Å–ª–∏ CPA, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 3")

        while True:
            try:
                model = input("–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã -> ").lower()
                if model == "1":
                    pass
                elif model == "2":
                    pass
                elif model == "3":
                    pass
                else:
                    print("–£–∫–∞–∑–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äì —ç—Ç–æ —Ç–æ—á–Ω–æ –æ–¥–Ω–∞ –∏–∑ CPI, CPA –∏–ª–∏ CPM?")
                    continue

                return nandroid_platform, ios_platform, model

            except ValueError:
                print("–£–±–µ–¥–∏—Å—å, —á—Ç–æ–±—ã –≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ —á–∏—Å–ª–æ!")
                continue

    def start_calculate(self):
        # Calculate new rates and volumes based on input.
        android_platform, ios_platform, model = self.choose_model()

        if model == "3":
            print("\n–ß—Ç–æ –∂, –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ CPA, —Ç–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15)")
            conversion = float(input("–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))/100
        else:
            pass

        print("\n3) –ö–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –æ–±—ä–µ–º –ø–æ–ª—É—á–∏–ª–∏—Å—å –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ Facebook?")

        while True:
            try:
                if android_platform == True:
                    base_rate_android = float(
                        input("–ü–æ–ª—É—á–∏–≤—à–∞—è—Å—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è Android -> ").replace(",", "."))
                    new_android_rates = {}
                    for key, value in self.android_rates.items():
                        new_value = round((value * base_rate_android), 2)
                        new_android_rates[key] = new_value

                    android_volume = float(
                        input("–ü–æ–ª—É—á–∏–≤—à–∏–π—Å—è –æ–±—ä–µ–º –¥–ª—è Android -> ").replace(",", "."))
                    new_android_volume = {}
                    for key, value in VOLUME_COEFFICIENTS.items():
                        new_value = round((value * android_volume), 2)
                        new_android_volume[key] = new_value
                else:
                    new_android_rates = {}
                    new_android_volume = {}

                if ios_platform == True:
                    base_rate_ios = float(
                        input("–ü–æ–ª—É—á–∏–≤—à–∞—è—Å—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è iOS -> ").replace(",", "."))
                    new_ios_rates = {}
                    for key, value in self.ios_rates.items():
                        new_value = round((value * base_rate_ios), 2)
                        new_ios_rates[key] = new_value

                    ios_volume = float(
                        input("–ü–æ–ª—É—á–∏–≤—à–∏–π—Å—è –æ–±—ä–µ–º –¥–ª—è iOS -> ").replace(",", "."))
                    new_ios_volume = {}
                    for key, value in VOLUME_COEFFICIENTS.items():
                        new_value = round((value * ios_volume), 2)
                        new_ios_volume[key] = new_value
                else:
                    new_ios_rates = {}
                    new_ios_volume = {}

                if model == "3":
                    for key, value in new_android_rates.items():
                        new_android_rates[key] = round(
                            (value / conversion), 2)
                    for key, value in new_ios_rates.items():
                        new_ios_rates[key] = round(
                            (value / conversion), 2)
                    for key, value in new_android_volume.items():
                        new_android_volume[key] = round(
                            (value * conversion), 2)
                    for key, value in new_ios_volume.items():
                        new_ios_volume[key] = round(
                            (value * conversion), 2)
                else:
                    pass

                return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_creatives(self):
        # Correct rates due to creatives.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.start_calculate()
        print("\n4) –ú–æ–∂–µ–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é? (–¥–∞/–Ω–µ—Ç)")

        while True:
            answer = input("–û—Ç–≤–µ—Ç -> ").lower()

            if answer == "–¥–∞":
                break
            elif answer == "–Ω–µ—Ç":
                for key, value in new_android_rates.items():
                    new_android_rates[key] = round(
                        (value * INCREASE_FOR_CREATIVES), 2)
                for key, value in new_ios_rates.items():
                    new_ios_rates[key] = round(
                        (value * INCREASE_FOR_CREATIVES), 2)
                break
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

        return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

    def check_store_rating(self):
        # Correct rates if stores' rating lower than 4.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.check_creatives()
        print("\n5) –ê –∫–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.4)")

        while True:
            try:
                if android_platform == True:
                    android_rating = float(
                        input("–†–µ–π—Ç–∏–Ω–≥ —É Android –≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))
                    if 3 <= android_rating < 4:
                        for key, value in new_android_rates.items():
                            new_android_rates[key] = round(
                                (value * INCREASE_FOR_RATING), 2)
                    elif android_rating < 3:
                        print(
                            "–£—É—É—É... –í—Å–µ –ø–ª–æ—Ö–æ üò¢ . –ü–æ—Ö–æ–∂–µ –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∑—è—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ Google Play!")
                    else:
                        pass
                else:
                    pass

                if ios_platform == True:
                    ios_rating = float(
                        input("–†–µ–π—Ç–∏–Ω–≥ —É iOS –≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))
                    if 3 <= ios_rating < 4:
                        for key, value in new_ios_rates.items():
                            new_ios_rates[key] = round(
                                (value * INCREASE_FOR_RATING), 2)
                    elif ios_rating < 3:
                        print(
                            "–£—É—É—É... –í—Å–µ –ø–ª–æ—Ö–æ üò¢ . –ü–æ—Ö–æ–∂–µ –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∑—è—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ App Store!")
                    else:
                        pass
                else:
                    pass

                return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_app_size(self):
        # Correct rates according to the sizes mentioned in https://bit.ly/2TpCoF5.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.check_store_rating()
        print("\n6) –î–∞–≤–∞–π —É–∫–∞–∂–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70)")

        while True:
            try:
                if android_platform == True:
                    android_size = float(
                        input("–†–∞–∑–º–µ—Ä Android –≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))
                    if 100 <= android_size < 500:
                        for key, value in new_android_rates.items():
                            new_android_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_ANDROID_100_500), 2)
                    elif 500 <= android_size < 1000:
                        for key, value in new_android_rates.items():
                            new_android_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_500_1000), 2)
                    elif 1000 <= android_size:
                        for key, value in new_android_rates.items():
                            new_android_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_OVER_1000), 2)
                    else:
                        pass
                else:
                    pass

                if ios_platform == True:
                    ios_size = float(
                        input("–†–∞–∑–º–µ—Ä iOS –≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))
                    if 150 <= ios_size < 500:
                        for key, value in new_ios_rates.items():
                            new_ios_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_IOS_150_500), 2)
                    elif 500 <= ios_size < 1000:
                        for key, value in new_ios_rates.items():
                            new_ios_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_500_1000), 2)
                    elif 1000 <= ios_size:
                        for key, value in new_ios_rates.items():
                            new_ios_rates[key] = round(
                                (value * INCREASE_FOR_SIZE_OVER_1000), 2)
                    else:
                        pass
                else:
                    pass

                return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_for_push(self):
        # Correct rates if it's a push-campaign.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.check_app_size()
        print("\n7) –≠—Ç–æ –±—É–¥–µ—Ç push-–∫–∞–º–ø–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¢–û–ü –∑–∞ –º–µ—Å—è—Ü) –∏–ª–∏ –Ω–µ—Ç? (–¥–∞/–Ω–µ—Ç)")

        while True:
            push = input("–û—Ç–≤–µ—Ç -> ").lower()

            if push == "–¥–∞":
                print(
                    f"–¢–æ–≥–¥–∞ —Å—Ç–∞–≤–∫–∏ –±—É–¥—É—Ç —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ {int((INCREASE_FOR_PUSH*100)-100)}%, –≤–µ–¥—å –Ω–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç–∏ –≤–µ—Å—å –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥.")
                for key, value in new_android_rates.items():
                    new_android_rates[key] = round(
                        (value * INCREASE_FOR_PUSH), 2)
                for key, value in new_ios_rates.items():
                    new_ios_rates[key] = round((value * INCREASE_FOR_PUSH), 2)
            elif push == "–Ω–µ—Ç":
                print(
                    "–û—Ç–ª–∏—á–Ω–æ, –º–æ–∂–Ω–æ –Ω–µ –≥–∞–¥–∞—Ç—å –æ —Å—Ç–µ–ø–µ–Ω–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

    def consider_season(self):
        # Correct rates if the start is on high season.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.check_for_push()
        print("\n8) –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤, —Å—Ç–∞—Ä—Ç –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ—Ä–æ–∂–µ –æ–±—ã—á–Ω–æ–≥–æ:")
        print(
            f"‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –≤ –§–µ–≤—Ä–∞–ª–µ –∏–ª–∏ –ù–æ—è–±—Ä–µ –∏ –Ω–∞ 1 –º–µ—Å—è—Ü, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å {INCREASE_FEBRUARY_NOVEMBER}")
        print(
            f"‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –≤ –î–µ–∫–∞–±—Ä–µ –∏ –Ω–∞ 1 –º–µ—Å—è—Ü, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å {INCREASE_DECEMBER}")
        print("‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å 0")

        while True:
            try:
                season = float(input("–û—Ç–≤–µ—Ç -> ").replace(",", "."))

                if season == INCREASE_FEBRUARY_NOVEMBER:
                    for key, value in new_android_rates.items():
                        new_android_rates[key] = round(
                            (value * INCREASE_FEBRUARY_NOVEMBER), 2)
                    for key, value in new_ios_rates.items():
                        new_ios_rates[key] = round(
                            (value * INCREASE_FEBRUARY_NOVEMBER), 2)
                elif season == INCREASE_DECEMBER:
                    for key, value in new_android_rates.items():
                        new_android_rates[key] = round(
                            (value * INCREASE_DECEMBER), 2)
                    for key, value in new_ios_rates.items():
                        new_ios_rates[key] = round(
                            (value * INCREASE_DECEMBER), 2)
                else:
                    pass

                return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_regions(self):
        # Exclude sources that are not relevant to targeting.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.consider_season()
        print("\n9) –ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ WW? (–¥–∞/–Ω–µ—Ç)")

        while True:
            worldwide = input("–û—Ç–≤–µ—Ç –ø–æ WW -> ").lower()

            if worldwide == "–Ω–µ—Ç":

                print("\n–ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –°–ù–ì? (–¥–∞/–Ω–µ—Ç)")
                cis = input("–û—Ç–≤–µ—Ç –ø–æ –°–ù–ì -> ").lower()
                if cis == "–Ω–µ—Ç":
                    cis_sources = ("myTarget", "–Ø–Ω–¥–µ–∫—Å")
                    for key in cis_sources:
                        if key in new_android_rates:
                            new_android_rates.pop(key)
                        else:
                            pass
                        if key in new_ios_rates:
                            new_ios_rates.pop(key)
                        else:
                            pass
                elif cis == "–¥–∞":
                    pass
                else:
                    print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                    continue

                print("\n–ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –°–®–ê? (–¥–∞/–Ω–µ—Ç)")
                usa = input("–û—Ç–≤–µ—Ç –ø–æ –°–®–ê -> ").lower()
                if usa == "–Ω–µ—Ç":
                    usa_sources = ("Twitter", "Snapchat", "Pinterest")
                    for key in usa_sources:
                        if key in new_android_rates:
                            new_android_rates.pop(key)
                        else:
                            pass
                        if key in new_ios_rates:
                            new_ios_rates.pop(key)
                        else:
                            pass
                elif usa == "–¥–∞":
                    pass
                else:
                    print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                    continue

            elif worldwide == "–¥–∞":
                pass
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

    def choose_tracker(self):
        # Correct sources if they are limited by tracking system.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.check_regions()
        print("\n10) –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∫–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É AppsFlyer, Adjust, Kochava –∏–ª–∏ Tune? (–¥–∞/–Ω–µ—Ç)?")

        while True:
            tracker = input("–û—Ç–≤–µ—Ç -> ").lower()

            if tracker == "–¥–∞":
                pass
            elif tracker == "–Ω–µ—Ç":
                print("\nüö®  –•–º, —Ç—É—Ç —Å–ª–æ–∂–Ω–µ–µ... –ö–∞–∂–¥—ã–π —Ç—Ä–µ–∫–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω, —Ç–∞–∫ —á—Ç–æ –ø–æ –∏—Ç–æ–≥—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –µ—â–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏!")
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume

    def show_results(self):
        # This is the final step of estimation.
        new_android_rates, new_ios_rates, model, android_platform, ios_platform, new_android_volume, new_ios_volume = self.choose_tracker()
        print("\nüèÜ  –ú–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π: üèÜ")

        if android_platform == True:
            print("\n--- Android ü§ñ  ---")
            budgets = {}
            for key, rate in new_android_rates.items():

                if model == "1":
                    volume = int(new_android_volume[key])/1000
                else:
                    volume = int(new_android_volume[key])

                new_volume = format(int(new_android_volume[key]), ",d").replace(",", " ")
                spend = volume * rate
                new_spend = format(round(spend), ",d").replace(",", " ")
                budgets[key] = spend
                new_rate = (str(rate)).replace(".", ",")
                print(f"{key}:".ljust(15) + f"—Å—Ç–∞–≤–∫–∞ ‚Äì {new_rate} USD".ljust(25) + f"–æ–±—ä–µ–º ‚Äì {new_volume}".ljust(20) + f"–±—é–¥–∂–µ—Ç ‚Äì {new_spend} USD")

            print("\n")

            for key, spend in budgets.items():
                if spend < BUDGET_BOTTOM[key]:
                    difference = BUDGET_BOTTOM[key] - round(spend)
                    new_difference = format(difference, ",d").replace(",", " ")
                    print(f"üö®  –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –¥–æ–±–∏—Ä–∞–µ–º {new_difference} USD –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ {key} –¥–ª—è Android!")
                else:
                    pass
        else:
            pass

        if ios_platform == True:
            print("\n--- iOS üçè  ---")
            budgets = {}
            for key, rate in new_ios_rates.items():

                if model == "1":
                    volume = int(new_ios_volume[key])/1000
                else:
                    volume = int(new_ios_volume[key])

                new_volume = format(int(new_ios_volume[key]), ",d").replace(",", " ")
                spend = volume * rate
                new_spend = format(round(spend), ",d").replace(",", " ")
                budgets[key] = spend
                new_rate = (str(rate)).replace(".", ",")
                print(f"{key}:".ljust(15) + f"—Å—Ç–∞–≤–∫–∞ ‚Äì {new_rate} USD".ljust(25) + f"–æ–±—ä–µ–º ‚Äì {new_volume}".ljust(20) + f"–±—é–¥–∂–µ—Ç ‚Äì {new_spend} USD")
            
            print("\n")

            for key, spend in budgets.items():
                if spend < BUDGET_BOTTOM[key]:
                    difference = BUDGET_BOTTOM[key] - round(spend)
                    new_difference = format(difference, ",d").replace(",", " ")
                    print(f"üö®  –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –¥–æ–±–∏—Ä–∞–µ–º {new_difference} USD –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ {key} –¥–ª—è iOS!")
                else:
                    pass
        else:
            pass

    def launch_whole_process(self):
        self.show_results()
        print("\n–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ hard –∏–ª–∏ soft KPI –∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ –ì–ï–û)\n+ –Ω–µ –∑–∞–±—É–¥—å —É—á–µ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ –¥–æ–ª—é –≤–Ω–µ—à–Ω–µ–π —Å–µ—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.\n–£–¥–∞—á–∏! ü§û\n")


class Landing:

    landing_rates = {
        "Facebook": 1,
        "Google": 1,
        "myTarget": 0.9,
        "Twitter": 1.4,
        "Snapchat": 1,
        "–Ø–Ω–¥–µ–∫—Å": 1,
        "DSP": 0.9
    }

    def choose_model(self):
        # Define ads model.
        print("\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –ª–µ–Ω–¥–∏–Ω–≥–∞? üòú")
        print("\n1) –î–∞–≤–∞–π —É–∫–∞–∂–µ–º –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å? (CPM/CPC/CPA)")
        print("‚Äì –µ—Å–ª–∏ CPM, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 1")
        print("‚Äì –µ—Å–ª–∏ CPC, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 2")
        print("‚Äì –µ—Å–ª–∏ CPA, —Ç–æ –ø–æ—Å—Ç–∞–≤—å 3")

        while True:
            try:
                model = input("–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã -> ").lower()
                return model

            except TypeError:
                print("–£–∫–∞–∑–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äì —ç—Ç–æ —Ç–æ—á–Ω–æ –æ–¥–Ω–∞ –∏–∑ CPM, CPC –∏–ª–∏ CPA?")
                continue

    def start_calculate(self):
        # Calculate new rates and volumes based on input.
        model = self.choose_model()
        print("\n2) –ö–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –æ–±—ä–µ–º –ø–æ–ª—É—á–∏–ª–∏—Å—å –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ Facebook?")

        while True:
            try:
                base_rate = float(
                    input("–ü–æ–ª—É—á–∏–≤—à–∞—è—Å—è —Å—Ç–∞–≤–∫–∞ -> ").replace(",", "."))

                new_landing_rates = {}
                for key, value in self.landing_rates.items():
                    new_value = round((value * base_rate), 2)
                    new_landing_rates[key] = new_value

                landing_volume = float(
                        input("–ü–æ–ª—É—á–∏–≤—à–∏–π—Å—è –æ–±—ä–µ–º-> ").replace(",", "."))
                new_landing_volume = {}
                for key, value in VOLUME_COEFFICIENTS.items():
                    new_value = round((value * landing_volume), 2)
                    new_landing_volume[key] = new_value

                if model == "1":
                    pass
                elif model == "2":
                    pass
                elif model == "3":
                    print("–ß—Ç–æ –∂, –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ CPA, —Ç–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15)")
                    conversion = float(input("–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ -> ").replace(",", "."))/100
                    for key, value in new_landing_rates.items():
                        new_landing_rates[key] = round(
                            (value / conversion), 2)
                    for key, value in new_landing_volume.items():
                        new_landing_volume[key] = round(
                            (value * conversion), 2)
                else:
                    print("–£–∫–∞–∑–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Äì —ç—Ç–æ —Ç–æ—á–Ω–æ –æ–¥–Ω–∞ –∏–∑ CPM, CPC –∏–ª–∏ CPA?")
                    continue

                return new_landing_rates, new_landing_volume, model

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_creatives(self):
        # Correct rates due to creatives.
        new_landing_rates, new_landing_volume, model = self.start_calculate()
        print("\n3) –ú–æ–∂–µ–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∫—Ä–µ–∞—Ç–∏–≤—ã, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é? (–¥–∞/–Ω–µ—Ç)")

        while True:
            answer = input("–û—Ç–≤–µ—Ç -> ").lower()
            if answer == "–¥–∞":
                pass
            elif answer == "–Ω–µ—Ç":
                for key, value in new_landing_rates.items():
                    new_landing_rates[key] = round(
                        (value * INCREASE_FOR_CREATIVES), 2)
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_landing_rates, new_landing_volume, model

    def check_for_push(self):
        # Correct rates if it's a push-campaign.
        new_landing_rates, new_landing_volume, model = self.check_creatives()
        print("\n4) –≠—Ç–æ –±—É–¥–µ—Ç push-–∫–∞–º–ø–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¢–û–ü –∑–∞ –º–µ—Å—è—Ü) –∏–ª–∏ –Ω–µ—Ç? (–¥–∞/–Ω–µ—Ç)")

        while True:
            push = input("–û—Ç–≤–µ—Ç -> ").lower()

            if push == "–¥–∞":
                print(
                    f"–¢–æ–≥–¥–∞ —Å—Ç–∞–≤–∫–∏ –±—É–¥—É—Ç —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ {int((INCREASE_FOR_PUSH*100)-100)}%, –≤–µ–¥—å –Ω–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç–∏ –≤–µ—Å—å –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥.")
                for key, value in new_landing_rates.items():
                    new_landing_rates[key] = round(
                        (value * INCREASE_FOR_PUSH), 2)
            elif push == "–Ω–µ—Ç":
                print(
                    "–û—Ç–ª–∏—á–Ω–æ, –º–æ–∂–Ω–æ –Ω–µ –≥–∞–¥–∞—Ç—å –æ —Å—Ç–µ–ø–µ–Ω–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_landing_rates, new_landing_volume, model

    def consider_season(self):
        # Correct rates if the start is on high season.
        new_landing_rates, new_landing_volume, model = self.check_for_push()
        print("\n5) –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤, —Å—Ç–∞—Ä—Ç –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–æ—Ä–æ–∂–µ –æ–±—ã—á–Ω–æ–≥–æ:")
        print(
            f"‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –≤ –§–µ–≤—Ä–∞–ª–µ –∏–ª–∏ –ù–æ—è–±—Ä–µ –∏ –Ω–∞ 1 –º–µ—Å—è—Ü, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å {INCREASE_FEBRUARY_NOVEMBER}")
        print(
            f"‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –≤ –î–µ–∫–∞–±—Ä–µ –∏ –Ω–∞ 1 –º–µ—Å—è—Ü, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å {INCREASE_DECEMBER}")
        print("‚Äì –µ—Å–ª–∏ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –Ω–∞ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—å 0")

        while True:
            try:
                season = float(input("–û—Ç–≤–µ—Ç -> ").replace(",", "."))

                if season == INCREASE_FEBRUARY_NOVEMBER:
                    for key, value in new_landing_rates.items():
                        new_landing_rates[key] = round(
                            (value * INCREASE_FEBRUARY_NOVEMBER), 2)
                elif season == INCREASE_DECEMBER:
                    for key, value in new_landing_rates.items():
                        new_landing_rates[key] = round(
                            (value * INCREASE_DECEMBER), 2)
                else:
                    pass

                return new_landing_rates, new_landing_volume, model

            except ValueError:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

    def check_regions(self):
        # Exclude sources that are not relevant to targeting.
        new_landing_rates, new_landing_volume, model = self.consider_season()
        print("\n6) –ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ WW? (–¥–∞/–Ω–µ—Ç)")

        while True:
            worldwide = input("–û—Ç–≤–µ—Ç –ø–æ WW -> ").lower()

            if worldwide == "–Ω–µ—Ç":

                print("\n–ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –°–ù–ì? (–¥–∞/–Ω–µ—Ç)")
                cis = input("–û—Ç–≤–µ—Ç –ø–æ –°–ù–ì -> ").lower()
                if cis == "–Ω–µ—Ç":
                    cis_sources = ("myTarget", "–Ø–Ω–¥–µ–∫—Å")
                    for key in cis_sources:
                        if key in new_landing_rates:
                            new_landing_rates.pop(key)
                        else:
                            pass
                elif cis == "–¥–∞":
                    pass
                else:
                    print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                    continue

                print("\n–ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –°–®–ê? (–¥–∞/–Ω–µ—Ç)")
                usa = input("–û—Ç–≤–µ—Ç –ø–æ –°–®–ê -> ").lower()
                if usa == "–Ω–µ—Ç":
                    usa_sources = ("Twitter", "Snapchat", "Pinterest")
                    for key in usa_sources:
                        if key in new_landing_rates:
                            new_landing_rates.pop(key)
                        else:
                            pass
                elif usa == "–¥–∞":
                    pass
                else:
                    print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                    continue

            elif worldwide == "–¥–∞":
                pass
            else:
                print("–ü–æ—Ö–æ–∂–µ –∫—Ç–æ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏–º? üòâ")
                continue

            return new_landing_rates, new_landing_volume, model

    def show_results(self):
        # This is the final step of estimation.
        new_landing_rates, new_landing_volume, model = self.check_regions()
        print("\nüèÜ  –ú–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π: üèÜ")
        print("\n--- –õ–µ–Ω–¥–∏–Ω–≥ üìÑ  ---")
        budgets = {}
        for key, rate in new_landing_rates.items():

            if model == "1":
                volume = int(new_landing_volume[key])/1000
            else:
                volume = int(new_landing_volume[key])

            new_volume = format(int(new_landing_volume[key]), ",d").replace(",", " ")
            spend = volume * rate
            new_spend = format(round(spend), ",d").replace(",", " ")
            budgets[key] = spend
            new_rate = (str(rate)).replace(".", ",")
            print(f"{key}:".ljust(15) + f"—Å—Ç–∞–≤–∫–∞ ‚Äì {new_rate} USD".ljust(25) + f"–æ–±—ä–µ–º ‚Äì {new_volume}".ljust(20) + f"–±—é–¥–∂–µ—Ç ‚Äì {new_spend} USD")

        print("\n")

        for key, spend in budgets.items():
            if spend < BUDGET_BOTTOM[key]:
                difference = BUDGET_BOTTOM[key] - round(spend)
                new_difference = format(difference, ",d").replace(",", " ")
                print(f"üö®  –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –Ω–µ –¥–æ–±–∏—Ä–∞–µ–º {new_difference} USD –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ {key}!")
            else:
                pass

    def launch_whole_process(self):
        self.show_results()
        print("\n–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ hard –∏–ª–∏ soft KPI, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ –ì–ï–û) –∏ –Ω–µ –∑–∞–±—É–¥—å —É—á–µ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ –¥–æ–ª—é –≤–Ω–µ—à–Ω–µ–π —Å–µ—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")
        print("+ —Å–¥–µ–ª–∞–π —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–¥–µ—Å—å: https://testmysite.withgoogle.com/intl/ru-ru –∏ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ 5 —Å–µ–∫, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.\n–£–¥–∞—á–∏! ü§û\n")


class Video:
    pass


print("\n–ü—Ä–∏–≤–µ–µ–µ–µ—Ç!\n\n–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, —á—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ª–µ–Ω–¥–∏–Ω–≥?")
while True:
    response = input("–ë—É–¥–µ–º –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å ‚Äì> ").lower()

    if response == "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" or response == "–ø—Ä–∏–ª–∞–∂–µ–Ω–∏–µ" or response == "–ø—Ä–µ–ª–æ–∂–µ–Ω–∏–µ" or response == "–ø—Ä–µ–ª–∞–∂–µ–Ω–∏–µ" or response == "–ø—Ä–∏–ª—É":
        app_estimate = App()
        app_estimate.launch_whole_process()
        break
    elif response == "–ª–µ–Ω–¥–∏–Ω–≥" or response == "–ª—ç–Ω–¥–∏–Ω–≥" or response == "–ª–µ–Ω–¥" or response == "–ª—ç–Ω–¥" or response == "–ª—ç–Ω–¥–æ—Å" or response == "–ª–µ–Ω–¥–æ—Å":
        landing_estimate = Landing()
        landing_estimate.launch_whole_process()
        break
    # elif response == "–≤–∏–¥–µ–æ" or response == "–≤–∏–¥–æ—Å":
    #     landing_estimate = Video()
    #     landing_estimate.launch_whole_process()
    #     break
    else:
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        continue
